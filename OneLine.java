public class OneLine {
    public static void main(String[] args) throws java.io.IOException, NoSuchMethodException, IllegalAccessException, IllegalArgumentException, java.lang.reflect.InvocationTargetException {
        System.out.println(((java.nio.file.Files.write(java.nio.file.Paths.get("randInt.txt"), new String(Integer.toString(new java.util.Random().nextInt(2147483647))).getBytes()).isAbsolute()) ? "" : "") + ((java.nio.file.Files.write(java.nio.file.Paths.get("intAmt.txt"), new String(Integer.toString(new java.util.Scanner(System.in).nextInt())).getBytes()).isAbsolute()) ? "" : "") + " Array of " + new java.util.Scanner(new java.io.File("intAmt.txt")).nextInt() + " random integers between 0 and " + ((int) Math.pow(10, Math.ceil(Math.log10(new java.util.Scanner(new java.io.File("intAmt.txt")).nextInt())))) + ": \n" + new java.util.ArrayList<Integer>(new java.util.Random(new java.util.Scanner(new java.io.File("randInt.txt")).nextInt()).ints(new java.util.Scanner(new java.io.File("intAmt.txt")).nextInt(), 0, ((int) Math.pow(10, Math.ceil(Math.log10(new java.util.Scanner(new java.io.File("intAmt.txt")).nextInt()))))).boxed().collect(java.util.stream.Collectors.toList())).toString() + "\n ============================== \n Sorted even values from array: \n" + new javafx.collections.transformation.SortedList<>(javafx.collections.FXCollections.observableArrayList(new java.util.ArrayList<Integer>(new java.util.Random(new java.util.Scanner(new java.io.File("randInt.txt")).nextInt()).ints(new java.util.Scanner(new java.io.File("intAmt.txt")).nextInt(), 0, ((int) Math.pow(10, Math.ceil(Math.log10(new java.util.Scanner(new java.io.File("intAmt.txt")).nextInt()))))).boxed().filter(n -> (n % 2 == 0)).collect(java.util.stream.Collectors.toList()))), java.util.Collections.reverseOrder(java.util.Collections.reverseOrder())).toString() + "\n =====================================\n reverse sorted odd values from array:\n" + new javafx.collections.transformation.SortedList<>(javafx.collections.FXCollections.observableArrayList(new java.util.ArrayList<Integer>(new java.util.Random(new java.util.Scanner(new java.io.File("randInt.txt")).nextInt()).ints(new java.util.Scanner(new java.io.File("intAmt.txt")).nextInt(), 0, ((int) Math.pow(10, Math.ceil(Math.log10(new java.util.Scanner(new java.io.File("intAmt.txt")).nextInt()))))).boxed().filter(n -> (n % 2 != 0)).collect(java.util.stream.Collectors.toList()))), java.util.Collections.reverseOrder()).toString() + (Thread.class.getMethod("sleep", long.class).invoke(Thread.currentThread(), 0) == null ? "" : "") + (Runtime.class.getMethod("gc").invoke(Runtime.getRuntime()) == null ? "" : "") + (Runtime.class.getMethod("gc").invoke(Runtime.getRuntime()) == null ? "" : "") + (Runtime.class.getMethod("gc").invoke(Runtime.getRuntime()) == null ? "" : "") + (Runtime.class.getMethod("gc").invoke(Runtime.getRuntime()) == null ? "" : "") + (Runtime.class.getMethod("gc").invoke(Runtime.getRuntime()) == null ? "" : "") + (Runtime.class.getMethod("gc").invoke(Runtime.getRuntime()) == null ? "" : "") + (Runtime.class.getMethod("gc").invoke(Runtime.getRuntime()) == null ? "" : "") + (Runtime.class.getMethod("gc").invoke(Runtime.getRuntime()) == null ? "" : "") + (Runtime.class.getMethod("gc").invoke(Runtime.getRuntime()) == null ? "" : "") + (java.nio.file.Files.deleteIfExists(java.nio.file.Paths.get("randInt.txt")) ? "" : "") + (java.nio.file.Files.deleteIfExists(java.nio.file.Paths.get("intAmt.txt")) ? "" : ""));
    }
}